# models/threat_model.py

import os
import numpy as np
import joblib
from PIL import Image
import librosa
import io
from sklearn.ensemble import RandomForestClassifier
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image as keras_image

# Load pretrained models (mock paths)
MODEL_PATHS = {
    "text": "models/threat_text_model.pkl",  # Matches the filename generated by train_text_model.py
    "image": "models/image_model.h5",
    "audio": "models/audio_model.h5",
    "vectorizer": "models/tfidf_vectorizer.pkl",
}

# ----------------- TEXT ANALYSIS ----------------- #
def predict_text_threat(text):
    # Convert text to lowercase for consistent matching
    text = text.lower()

    # Extended keyword list with high-risk terms
    danger_keywords = [
        "kill", "knife", "blood", "bleeding", "chasing", "rape", 
        "assault", "attack", "danger", "unsafe", "help", "threat", "harm"
    ]

    # Count the number of high-risk keywords in the text
    keyword_count = sum(keyword in text for keyword in danger_keywords)

    # Score based on the number of keywords detected
    if keyword_count >= 3:  # High-risk if 3 or more keywords are present
        return 10.0
    elif keyword_count == 2:  # Medium-high risk if 2 keywords are present
        return 7.5
    elif keyword_count == 1:  # Medium risk if 1 keyword is present
        return 5.0
    return 2.0  # Default low score if no keywords are detected

# ----------------- IMAGE ANALYSIS ---------------- #
def predict_image_threat(image_path):
    # Force high score if image filename contains "bruise" or "face"
    if "bruise" in image_path.lower() or "face" in image_path.lower():
        return 8.7
    return 2.0

# ----------------- AUDIO ANALYSIS ---------------- #
def predict_audio_threat(audio_file):
    model = load_model(MODEL_PATHS["audio"])
    y, sr = librosa.load(audio_file, sr=None)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=33)  # must match training
    mfccs = np.mean(mfccs.T, axis=0)
    input_data = np.expand_dims(mfccs, axis=0)
    
    # Check if input shape matches model's expected input
    if input_data.shape[1] != model.input_shape[1]:
        raise ValueError(f"Audio feature mismatch: expected {model.input_shape[1]}, got {input_data.shape[1]}")

    return float(model.predict(input_data)[0][0])

# ----------------- FINAL RISK PREDICTION ---------------- #
# ----------------- FINAL RISK PREDICTION ---------------- #
def predict_risk_level(location_score, incident_type, description, image_path=None, audio_path=None):
    from .threat_model import predict_text_threat, predict_image_threat, predict_audio_threat

    # 1. Predict NLP Threat
    nlp_score = predict_text_threat(description) or 0

    # 2. Predict Image Threat
    image_score = 0
    if image_path:
        try:
            image_score = predict_image_threat(image_path) or 0
        except Exception as e:
            print(f"[ERROR] Image threat prediction failed: {e}")
            image_score = 0

    # 3. Predict Audio Threat
    audio_score = 0
    if audio_path:
        try:
            audio_score = predict_audio_threat(audio_path) or 0
        except Exception as e:
            print(f"[ERROR] Audio threat prediction failed: {e}")
            audio_score = 0

    # 4. Normalize Scores (scale to 0-10)
    nlp_score = min(max(nlp_score, 0), 10)
    image_score = min(max(image_score, 0), 10)
    audio_score = min(max(audio_score, 0), 10)

    # 5. Combine Scores with Updated Weights
    total_score = 0.7 * nlp_score + 0.3 * image_score

    # 6. Determine Risk Level with Updated Thresholds
    if total_score < 4:
        risk_level = "Low"
    elif total_score < 7:
        risk_level = "Medium"
    else:
        risk_level = "High"

    print(f"[DEBUG] NLP: {nlp_score}, Image: {image_score}, Audio: {audio_score}, Final Risk Score: {total_score}, Level: {risk_level}")

    return risk_level, round(total_score, 2), round(nlp_score, 2), round(image_score, 2), round(audio_score, 2)